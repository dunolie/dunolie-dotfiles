#!/usr/bin/perl -w
#
# Wrapper to screen(1) for easy resuming and management of named screen
# sessions. Run perldoc(1) on this script for additional documentation.
#
# The author disclaims all copyrights and releases this script into the
# public domain.

use strict;

my $session_re = qr/[\w.-]{1,32}/;

my %param = ( force => 0 );

use Getopt::Std;
my %opts;
getopts 'h?flq', \%opts;

print_help() if $opts{h} or $opts{'?'};

$param{force} = 1 if exists $opts{f};
$param{name} = shift || 'default';

my ( $sessions, $shortnames ) = get_screen_sessions();

# listing of screen sessions, for autocomplete needs
if ( exists $opts{l} ) {
  my ( @sessions, %seen );
  for ( keys %$shortnames ) {
    push @sessions, $_;
    $seen{ $shortnames->{$_}->{name} } = 1;
  }
  push @sessions, grep { not exists $seen{$_} } keys %$sessions;

  print join( "\n", sort @sessions ), "\n" if @sessions;
  exit;
}

unless ( $param{name} =~ m/^$session_re$/ ) {
  remark( 'error', 'invalid session name', { session => $param{session} } );
  exit 101;
}

# run if no prior sessions found
exec_screen() unless ( keys %$sessions );

# otherwise, consult session structures and figure out what to do
my $running = 0;
my $state   = 0;

if ( exists $sessions->{ $param{name} } ) {
  $running = 1;
  $state   = $sessions->{ $param{name} }->{state};
}
if ( exists $shortnames->{ $param{name} } ) {
  $running     = 1;
  $state       = $shortnames->{ $param{name} }->{state};
  $param{name} = $shortnames->{ $param{name} }->{name};
}

exec_screen() if not $running or $param{force} or not $state;

# otherwise, we give up
remark(
  'error',
  'session already attached',
  { session => $param{name} }
 )
 unless exists $opts{q};
exit 1;

# how screen is run. Requires '-d -R' to automagically create or resume
# a named session and detatch it else where. (-D -R should also work,
# but does a logout, which I dislike.)
sub exec_screen {
  # TODO need means of customizing (some) of the options
  exec qw(screen -A -d -R -S), $param{name};
}

# parses output of screen session listings into data structures
sub get_screen_sessions {
  unless ( open SCREENLS, 'screen -ls |' ) {
    remark( 'error', 'could not run screen', { errno => $! } );
    exit 102;
  }

  my ( %sessions, %shortnames );
  while (<SCREENLS>) {
    if (m/^\s+ ($session_re) \s+ \( (Attached|Detached) \)/x) {
      my $name  = $1;
      my $state = $2 eq 'Attached' ? 1 : 0;

      my ($shortname) = $name =~ m/^ \d+ \. ([^.]+) $/x;

      $sessions{$name} = { state => $state };
      $shortnames{$shortname} = { state => $state, name => $name }
       if defined $shortname;
    }
  }

  return \%sessions, \%shortnames;
}

sub remark {
  my $priority   = shift;
  my $message    = shift;
  my $attributes = shift;

  chomp $message;

  my $attr_str;
  if ($attributes) {
    $attr_str = join ', ',
     map { $attributes->{$_} ||= q{}; "$_=$attributes->{$_}" }
     sort keys %$attributes;
  }

  print STDERR "$priority: $message"
   . ( $attr_str ? ": $attr_str" : q{} ) . "\n";
  return 1;
}

sub print_help {
  print <<"HELP";
Usage: $0 [-f] [session name]

Wrapper for screen(1).

Options:
  -h/-?  Display this message.

  -f     Force resuming of session, even if attached elsewhere.

  -l     List running screen sessions for autocomplete needs.

Run perldoc(1) on this script for additional documentation.

HELP
  exit 100;
}

__END__

=head1 NAME

re - wrapper for screen(1) for easy session management

=head1 SYNOPSIS

Run or rejoin default screen(1) session, unless attached elsewhere. Use
the I<-f> option to force attachment if attached elsewhere.

  $ re
  $ re -f

Run or rejoin session named C<logs> instead of C<default>.

  $ re logs


=head1 DESCRIPTION

=head2 Overview

Easy to type wrapper to screen(1). For quick attachment and easy
naming of screen sessions. Instead of the screen(1) session name of
C<26787.ttyp1.legacy>, a shorter C<legacy> or other named session
can be created or attached. A listing mode is provided for
autocomplete systems.

=head2 Normal Usage

  $ re [-f] [-q] [session name]
  $ re -l

See L<"OPTIONS"> for details on the command line switches supported.

The resulting screen(1) command will be executed, replacing this script.
Otherwise, the script will exit with a non-zero exit value and possibly
an error message or usage notes.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<-f>

Forces the attachment, even if session is attached elsewhere.

=item B<-q>

Makes the script quieter. One use of this is for an interactive login
script (from C<~/.zshrc> or similar), where the first interactive
session should resume or run screen(1), and subsequent sessions should
fail without errors.

Problems with screen(1) or other serious errors will still be reported.

=item B<-l>

List running screen sessions, and exit. For information or autocomplete
systems. For example, the following C<compdef> should work for the
zsh(1) shell.

  #compdef re

  local expl ret=1

  _wanted shortcut expl 'shortcut' compadd "$@" - \
    $(_call_program scs re -l) && ret=0

  return ret

=back

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known issues.

=head1 SEE ALSO

perl(1), screen(1)

=head1 AUTHOR

Jeremy Mates, http://sial.org/contact/

=head1 COPYRIGHT

The author disclaims all copyrights and releases this script into the
public domain.

=cut
